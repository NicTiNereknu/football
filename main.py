#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Jul 23, 2019 11:02:48 PM CEST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    main_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    main_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("519x565+533+80")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.096, rely=0.655, height=24, width=47)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Button''')
        self.Button1.bind('<Button-1>',lambda e:main_support.btnButton1_Click(e))

        self.btnSaveEdgesState = tk.Button(top)
        self.btnSaveEdgesState.place(relx=0.039, rely=0.867, height=24, width=95)

        self.btnSaveEdgesState.configure(activebackground="#ececec")
        self.btnSaveEdgesState.configure(activeforeground="#000000")
        self.btnSaveEdgesState.configure(background="#d9d9d9")
        self.btnSaveEdgesState.configure(disabledforeground="#a3a3a3")
        self.btnSaveEdgesState.configure(foreground="#000000")
        self.btnSaveEdgesState.configure(highlightbackground="#d9d9d9")
        self.btnSaveEdgesState.configure(highlightcolor="black")
        self.btnSaveEdgesState.configure(pady="0")
        self.btnSaveEdgesState.configure(text='''Save Edges State''')
        self.btnSaveEdgesState.bind('<Button-1>',lambda e:main_support.btnSaveEdgesState_Click(e))

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.25, rely=0.053, relheight=0.926
                , relwidth=0.699)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=363)

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.039, rely=0.708, height=21, width=104)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Uplne Neco jineho''')

        self.btnLoadEdgesState = tk.Button(top)
        self.btnLoadEdgesState.place(relx=0.039, rely=0.761, height=24
                , width=107)
        self.btnLoadEdgesState.configure(activebackground="#ececec")
        self.btnLoadEdgesState.configure(activeforeground="#000000")
        self.btnLoadEdgesState.configure(background="#d9d9d9")
        self.btnLoadEdgesState.configure(disabledforeground="#a3a3a3")
        self.btnLoadEdgesState.configure(foreground="#000000")
        self.btnLoadEdgesState.configure(highlightbackground="#d9d9d9")
        self.btnLoadEdgesState.configure(highlightcolor="black")
        self.btnLoadEdgesState.configure(pady="0")
        self.btnLoadEdgesState.configure(text='''Load Edges State''')
        self.btnLoadEdgesState.bind('<Button-1>',lambda e:main_support.btnLoadEdgesState_Click(e))

        self.btnPlayAI = tk.Button(top)
        self.btnPlayAI.place(relx=0.039, rely=0.814, height=24, width=97)
        self.btnPlayAI.configure(activebackground="#ececec")
        self.btnPlayAI.configure(activeforeground="#000000")
        self.btnPlayAI.configure(background="#d9d9d9")
        self.btnPlayAI.configure(disabledforeground="#a3a3a3")
        self.btnPlayAI.configure(foreground="#000000")
        self.btnPlayAI.configure(highlightbackground="#d9d9d9")
        self.btnPlayAI.configure(highlightcolor="black")
        self.btnPlayAI.configure(pady="0")
        self.btnPlayAI.configure(text='''Play AI''')
        self.btnPlayAI.bind('<Button-1>',lambda e:main_support.btnPlayAI_Click(e))

        self.style.configure('Treeview.Heading',  font="TkDefaultFont")
        self.trvPath = ScrolledTreeView(top)
        self.trvPath.place(relx=0.963, rely=0.071, relheight=0.65
                , relwidth=0.848)
        # build_treeview_support starting.
        self.trvPath.heading("#0",anchor="center")
        self.trvPath.column("#0",width="421")
        self.trvPath.column("#0",minwidth="20")
        self.trvPath.column("#0",stretch="1")
        self.trvPath.column("#0",anchor="w")
        self.trvPath.bind('<<TreeviewSelect>>',lambda e:main_support.trvPath_Select(e))

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.983, rely=0.053, height=21, width=49)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''AI paths''')

        self.txtNumberOfPathsToEndNodes = tk.Entry(top)
        self.txtNumberOfPathsToEndNodes.place(relx=0.058, rely=0.938, height=20
                , relwidth=0.123)
        self.txtNumberOfPathsToEndNodes.configure(background="white")
        self.txtNumberOfPathsToEndNodes.configure(disabledforeground="#a3a3a3")
        self.txtNumberOfPathsToEndNodes.configure(font="TkFixedFont")
        self.txtNumberOfPathsToEndNodes.configure(foreground="#000000")
        self.txtNumberOfPathsToEndNodes.configure(highlightbackground="#d9d9d9")
        self.txtNumberOfPathsToEndNodes.configure(highlightcolor="black")
        self.txtNumberOfPathsToEndNodes.configure(insertbackground="black")
        self.txtNumberOfPathsToEndNodes.configure(selectbackground="#c4c4c4")
        self.txtNumberOfPathsToEndNodes.configure(selectforeground="black")

        self.btnSetGameProperties = tk.Button(top)
        self.btnSetGameProperties.place(relx=0.039, rely=0.088, height=24
                , width=83)
        self.btnSetGameProperties.configure(activebackground="#ececec")
        self.btnSetGameProperties.configure(activeforeground="#000000")
        self.btnSetGameProperties.configure(background="#d9d9d9")
        self.btnSetGameProperties.configure(disabledforeground="#a3a3a3")
        self.btnSetGameProperties.configure(foreground="#000000")
        self.btnSetGameProperties.configure(highlightbackground="#d9d9d9")
        self.btnSetGameProperties.configure(highlightcolor="black")
        self.btnSetGameProperties.configure(pady="0")
        self.btnSetGameProperties.configure(text='''Set''')
        self.btnSetGameProperties.bind('<Button-1>',lambda e:main_support.btnSetGameProperties_OnClick(e))

        self.btnPlay = tk.Button(top)
        self.btnPlay.place(relx=0.039, rely=0.159, height=34, width=83)
        self.btnPlay.configure(activebackground="#ececec")
        self.btnPlay.configure(activeforeground="#000000")
        self.btnPlay.configure(background="#d9d9d9")
        self.btnPlay.configure(disabledforeground="#a3a3a3")
        self.btnPlay.configure(font="-family {Segoe UI} -size 10 -weight bold")
        self.btnPlay.configure(foreground="#000000")
        self.btnPlay.configure(highlightbackground="#d9d9d9")
        self.btnPlay.configure(highlightcolor="black")
        self.btnPlay.configure(pady="0")
        self.btnPlay.configure(text='''Play''')
        self.btnPlay.bind('<Button-1>',lambda e:main_support.btnPlay_OnClick(e))

        self.canvasArrowUP = tk.Canvas(top)
        self.canvasArrowUP.place(relx=0.116, rely=0.354, relheight=0.085
                , relwidth=0.092)
        self.canvasArrowUP.configure(background="#d9d9d9")
        self.canvasArrowUP.configure(borderwidth="2")
        self.canvasArrowUP.configure(insertbackground="black")
        self.canvasArrowUP.configure(relief="ridge")
        self.canvasArrowUP.configure(selectbackground="#c4c4c4")
        self.canvasArrowUP.configure(selectforeground="black")
        self.canvasArrowUP.configure(width=83)

        self.canvasArrowDOWN = tk.Canvas(top)
        self.canvasArrowDOWN.place(relx=0.116, rely=0.354, relheight=0.085
                , relwidth=0.092)
        self.canvasArrowDOWN.configure(background="#d9d9d9")
        self.canvasArrowDOWN.configure(borderwidth="2")
        self.canvasArrowDOWN.configure(highlightbackground="#d9d9d9")
        self.canvasArrowDOWN.configure(highlightcolor="black")
        self.canvasArrowDOWN.configure(insertbackground="black")
        self.canvasArrowDOWN.configure(relief="ridge")
        self.canvasArrowDOWN.configure(selectbackground="#c4c4c4")
        self.canvasArrowDOWN.configure(selectforeground="black")
        self.canvasArrowDOWN.configure(width=83)

        self.lblPlayer1Name = tk.Label(top)
        self.lblPlayer1Name.place(relx=0.116, rely=0.319, height=21, width=60)
        self.lblPlayer1Name.configure(background="#d9d9d9")
        self.lblPlayer1Name.configure(disabledforeground="#a3a3a3")
        self.lblPlayer1Name.configure(foreground="#000000")

        self.lblPlayer2Name = tk.Label(top)
        self.lblPlayer2Name.place(relx=0.116, rely=0.442, height=21, width=60)
        self.lblPlayer2Name.configure(background="#d9d9d9")
        self.lblPlayer2Name.configure(disabledforeground="#a3a3a3")
        self.lblPlayer2Name.configure(foreground="#000000")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





